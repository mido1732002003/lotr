generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  CONFIRMED
  FAILED
  EXPIRED
  REFUNDED
}

enum PaymentProvider {
  COINBASE_COMMERCE
  NOWPAYMENTS
}

enum TicketStatus {
  PENDING_PAYMENT
  ACTIVE
  WON
  LOST
  EXPIRED
  CANCELLED
}

enum DrawStatus {
  UPCOMING
  ACTIVE
  DRAWING
  COMPLETED
  CANCELLED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum WalletNetwork {
  BITCOIN
  ETHEREUM
  POLYGON
  SOLANA
  BINANCE_SMART_CHAIN
}

enum AuditAction {
  TICKET_CREATED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  DRAW_CREATED
  DRAW_STARTED
  DRAW_COMPLETED
  DRAW_CANCELLED
  PAYOUT_INITIATED
  PAYOUT_COMPLETED
  ADMIN_ACCESS
  WEBHOOK_RECEIVED
  WEBHOOK_VERIFIED
  WEBHOOK_FAILED
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified Boolean   @default(false)
  wallets       Wallet[]
  tickets       Ticket[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([email])
}

model Wallet {
  id        String         @id @default(cuid())
  address   String
  network   WalletNetwork
  isPrimary Boolean        @default(false)
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tickets   Ticket[]
  payouts   Payout[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([address, network])
  @@index([userId])
  @@index([address])
}

model Draw {
  id                 String      @id @default(cuid())
  drawNumber         Int         @unique @default(autoincrement())
  title              String
  description        String?
  ticketPrice        Decimal     @db.Decimal(18, 8)
  currency           String      @default("USDC")
  maxTickets         Int
  status             DrawStatus  @default(UPCOMING)
  scheduledAt        DateTime
  startedAt          DateTime?
  completedAt        DateTime?
  serverSeed         String?     // Private until after draw
  serverSeedHash     String?     // Public commitment
  blockchainAnchor   String?     // Bitcoin block hash or similar
  blockHeight        Int?
  winnerSelection    String?     // JSON of winner derivation
  totalPrizePool     Decimal     @default(0) @db.Decimal(18, 8)
  tickets            Ticket[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  @@index([status])
  @@index([scheduledAt])
}

model Ticket {
  id            String        @id @default(cuid())
  ticketNumber  String        @unique
  drawId        String
  draw          Draw          @relation(fields: [drawId], references: [id])
  userId        String?
  user          User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  walletId      String
  wallet        Wallet        @relation(fields: [walletId], references: [id])
  status        TicketStatus  @default(PENDING_PAYMENT)
  isWinner      Boolean       @default(false)
  payment       Payment?
  payout        Payout?
  metadata      Json?
  purchasedAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([drawId])
  @@index([userId])
  @@index([walletId])
  @@index([status])
  @@index([ticketNumber])
}

model Payment {
  id                String           @id @default(cuid())
  provider          PaymentProvider
  providerPaymentId String           @unique
  ticketId          String           @unique
  ticket            Ticket           @relation(fields: [ticketId], references: [id])
  amount            Decimal          @db.Decimal(18, 8)
  currency          String
  cryptoAmount      Decimal?         @db.Decimal(18, 8)
  cryptoCurrency    String?
  status            PaymentStatus    @default(PENDING)
  checkoutUrl       String?
  expiresAt         DateTime?
  confirmedAt       DateTime?
  failedAt          DateTime?
  failureReason     String?
  transactionHash   String?
  blockConfirmations Int?
  webhookData       Json?
  metadata          Json?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@index([provider])
  @@index([status])
  @@index([ticketId])
}

model Payout {
  id              String        @id @default(cuid())
  ticketId        String        @unique
  ticket          Ticket        @relation(fields: [ticketId], references: [id])
  walletId        String
  wallet          Wallet        @relation(fields: [walletId], references: [id])
  amount          Decimal       @db.Decimal(18, 8)
  currency        String
  cryptoAmount    Decimal?      @db.Decimal(18, 8)
  cryptoCurrency  String?
  status          PayoutStatus  @default(PENDING)
  transactionHash String?
  networkFee      Decimal?      @db.Decimal(18, 8)
  processedAt     DateTime?
  completedAt     DateTime?
  failedAt        DateTime?
  failureReason   String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([status])
  @@index([walletId])
}

model AuditLog {
  id          String       @id @default(cuid())
  action      AuditAction
  entityType  String?
  entityId    String?
  userId      String?
  ipAddress   String?
  userAgent   String?
  metadata    Json?
  timestamp   DateTime     @default(now())

  @@index([action])
  @@index([entityType, entityId])
  @@index([userId])
  @@index([timestamp])
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
}