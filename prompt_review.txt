You are now in **REVIEW & FIX** mode for the **lotr** project you just generated (Next.js 14 App Router, TypeScript strict, Tailwind, next-intl EN/AR, Prisma + PostgreSQL via Docker, crypto payments with a Coinbase Commerce adapter + NOWPayments stub).

GOAL:
- Validate the repo you produced against the **file tree you printed in Part 1** (that tree is the source of truth).
- Fix gaps so the project runs end-to-end locally with simple commands.

TASKS (do them in order):

1) **Structure comparison** (against the Part 1 tree you printed):
   - List **Matched files (count: N)** — exact paths.
   - List **Missing files (count: M)** — exact paths.
     - Consider **Next.js route segments missing required files** as missing (e.g., route dirs without `page.tsx`/`layout.tsx`, API dirs without `route.ts`).
     - Consider **i18n** essentials as missing if absent (`/messages/en.json`, `/messages/ar.json`, and any `i18n.ts`/`next-intl` wiring you referenced).
     - Consider **config** essentials as missing if absent (`next.config.mjs/ts`, `tailwind.config.ts`, `postcss.config.js`, `.eslintrc.*`, `.prettierrc.*`, `tsconfig.json`).
     - Consider **Prisma** essentials as missing if absent (`prisma/schema.prisma`, migrations if referenced, and seed script).
     - Consider **env scaffolding** as missing if `.env.example` does not include all keys you used.
   - List **Extra files (count: K)** — exact paths, and say keep/remove + why (e.g., dead code, duplicate config, unused adapters).

2) **Create missing files** so the app can run cleanly:
   - For EACH missing file, emit a minimal, correct implementation consistent with the stack you already chose:
     - Next.js (App Router) pages/layouts/components in **TypeScript**.
     - API route handlers (`route.ts`) using server-side logic and Zod validation as you already referenced.
     - `i18n` bootstrapping with **next-intl** and **RTL** support for Arabic.
     - Prisma schema + seed that align with your domain (Users/Wallets/Tickets/Payments/Draws/Payouts/AuditLog).
     - Payment **adapter interface**, concrete **Coinbase Commerce** adapter (checkout + webhook HMAC verify), and **NOWPayments** stub.
     - Admin auth via `ADMIN_PASS` (middleware or server action).
     - Config files (Next.js, Tailwind, ESLint/Prettier, tsconfig).
     - `.env.example` complete with all required keys.
   - **Emission format** (so I can copy/paste directly):
     ```
     ```ts
     // path: relative/path/to/file.ts
     <file content>
     ```
     ```
     - Use the correct language tag: `ts`, `tsx`, `js`, `json`, `yaml`, `yml`, `sql`, `sh`, `env`, `md` as appropriate.
     - Always include the leading `// path:` (or `# path:` for shell/SQL/ENV) header exactly.

3) **Patches (only if necessary)**:
   - If an existing file needs a small fix (imports/paths/types/config), provide EITHER:
     - A minimal unified diff:
       ```
       --- a/app/(site)/page.tsx
       +++ b/app/(site)/page.tsx
       @@
       - old line
       + new line
       ```
     - OR the full updated file in the same fenced block format with `// path:` (or `# path:`) header.

4) **Runbook (clear and concise)** — explain exactly how to run:
   - **Prereqs:** Node.js **v20+**, pnpm, Docker (and Docker Compose), Git. (Optional: ngrok/Cloudflared for webhook testing)
   - **Install deps:**
     - `pnpm install`
   - **Database (Docker):**
     - `docker compose up -d db` (or `docker compose up -d` if the app is included)
     - Verify Postgres is healthy.
   - **Prisma:**
     - `pnpm prisma generate`
     - `pnpm prisma migrate dev` (creates DB schema)
     - `pnpm seed` (if provided) to create sample draw, test translations, etc.
   - **Environment:**
     - Copy `.env.example` → `.env`
     - Briefly explain keys:
       - `DATABASE_URL` (Postgres in Docker)
       - `ADMIN_PASS` (admin access to `/admin`)
       - `COINBASE_COMMERCE_API_KEY`, `COINBASE_COMMERCE_WEBHOOK_SECRET` (payments)
       - `APP_URL` (e.g., `http://localhost:3000`)
       - `NEXT_PUBLIC_DEFAULT_LOCALE` (`en`), `NEXT_PUBLIC_SUPPORTED_LOCALES` (`en,ar`)
     - Optional keys (document if present): email provider API key, rate-limit secrets, etc.
   - **Dev server:**
     - `pnpm dev`
     - Open `http://localhost:3000` (Home) and `/admin`
   - **Webhook testing:**
     - Expose local server (e.g., `ngrok http 3000`) and set provider webhook to `https://<tunnel>/api/payments/webhook`
     - Provide a curl sample to replay a Coinbase Commerce webhook with signature header for local verification.
   - **Draws & payouts:**
     - Run a draw from `/admin` (commit–reveal + anchor flow) and record manual payout tx hash.
     - View **provably fair proof** page for the draw.
   - **Internationalization:**
     - Use the language switcher (EN/AR) and verify **RTL** on Arabic pages.

5) **Self-test & Troubleshooting**:
   - **Self-test checklist (commands):**
     - `docker compose up -d db`
     - `pnpm prisma migrate dev && pnpm prisma generate && pnpm seed`
     - `pnpm dev` → open site
     - Create a checkout → receive webhook → ticket issued
     - Trigger a draw → winner selected → proof visible
     - Record payout → status updated in DB
     - Toggle language EN/AR → confirm RTL on AR
   - **Common issues + quick fixes:**
     - **Prisma client mismatch:** run `pnpm prisma generate` after schema changes.
     - **DB connection refused:** ensure Docker Postgres is up; check `DATABASE_URL`.
     - **Webhook 401/invalid signature:** confirm `COINBASE_COMMERCE_WEBHOOK_SECRET`, tunnel URL, exact header name, and raw body handling in Next.js route.
     - **CORS / body parsing:** ensure the webhook route **reads raw body** if required for HMAC verification.
     - **next-intl/RTL issues:** verify provider setup in `layout.tsx`, correct `dir="rtl"` on Arabic, and message file presence.
     - **Admin auth fails:** confirm `ADMIN_PASS` and middleware path matches `/admin`.
     - **Tailwind not applying:** check content globs in `tailwind.config.ts`.
   - **Reset instructions:**
     - `pnpm prisma migrate reset` (or drop/recreate DB container)
     - Remove `.next/` and re-run `pnpm dev`
     - Re-seed via `pnpm seed`

6) **Final summary**:
   - Bullet list of **files you created/changed** in this pass (paths only).
   - Any **TODOs** left (e.g., automated on-chain payouts, Chainlink VRF integration, additional payment adapters, unit tests for adapters, GitHub Actions CI expansion, e2e tests with Playwright).

CONSTRAINTS:
- **Do NOT print the full tree here** — use the tree you printed in Part 1 as the reference.
- Keep dependencies and changes minimal; **don’t rewrite working files**.
- Ensure **imports/paths/types/env names** are consistent across app, API routes, Prisma, and adapters.
- Use **modern Next.js 14 features** (App Router) and **TypeScript strict**.
- After applying your changes, the project **must** run end-to-end with the Runbook.

BEGIN NOW.
